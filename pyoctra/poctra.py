# This file was automatically generated by SWIG JSE (https://www.swig.org).
# Version 5.0.6
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""These are the python bindings to the octra library"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if getattr(globals().get("__spec__"), "parent", None) or __package__ or "." in __name__:
    from . import _poctra
else:
    import _poctra

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _poctra.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _poctra.delete_SwigPyIterator

    def value(self):
        return _poctra.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _poctra.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _poctra.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _poctra.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _poctra.SwigPyIterator_equal(self, x)

    def copy(self):
        return _poctra.SwigPyIterator_copy(self)

    def next(self):
        return _poctra.SwigPyIterator_next(self)

    def __next__(self):
        return _poctra.SwigPyIterator___next__(self)

    def previous(self):
        return _poctra.SwigPyIterator_previous(self)

    def advance(self, n):
        return _poctra.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _poctra.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _poctra.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _poctra.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _poctra.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _poctra.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _poctra.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _poctra:
_poctra.SwigPyIterator_swigregister(SwigPyIterator)
STD_STRINGS_BODY_SECTION = _poctra.STD_STRINGS_BODY_SECTION
class IPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _poctra.IPair_swiginit(self, _poctra.new_IPair(*args))
    first = property(_poctra.IPair_first_get, _poctra.IPair_first_set)
    second = property(_poctra.IPair_second_get, _poctra.IPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _poctra.delete_IPair

# Register IPair in _poctra:
_poctra.IPair_swigregister(IPair)
class IVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _poctra.IVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _poctra.IVec___nonzero__(self)

    def __bool__(self):
        return _poctra.IVec___bool__(self)

    def __len__(self):
        return _poctra.IVec___len__(self)

    def __getslice__(self, i, j):
        return _poctra.IVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _poctra.IVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _poctra.IVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _poctra.IVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _poctra.IVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _poctra.IVec___setitem__(self, *args)

    def pop(self):
        return _poctra.IVec_pop(self)

    def append(self, x):
        return _poctra.IVec_append(self, x)

    def empty(self):
        return _poctra.IVec_empty(self)

    def size(self):
        return _poctra.IVec_size(self)

    def swap(self, v):
        return _poctra.IVec_swap(self, v)

    def begin(self):
        return _poctra.IVec_begin(self)

    def end(self):
        return _poctra.IVec_end(self)

    def rbegin(self):
        return _poctra.IVec_rbegin(self)

    def rend(self):
        return _poctra.IVec_rend(self)

    def clear(self):
        return _poctra.IVec_clear(self)

    def get_allocator(self):
        return _poctra.IVec_get_allocator(self)

    def pop_back(self):
        return _poctra.IVec_pop_back(self)

    def erase(self, *args):
        return _poctra.IVec_erase(self, *args)

    def __init__(self, *args):
        _poctra.IVec_swiginit(self, _poctra.new_IVec(*args))

    def push_back(self, x):
        return _poctra.IVec_push_back(self, x)

    def front(self):
        return _poctra.IVec_front(self)

    def back(self):
        return _poctra.IVec_back(self)

    def assign(self, n, x):
        return _poctra.IVec_assign(self, n, x)

    def resize(self, *args):
        return _poctra.IVec_resize(self, *args)

    def insert(self, *args):
        return _poctra.IVec_insert(self, *args)

    def reserve(self, n):
        return _poctra.IVec_reserve(self, n)

    def capacity(self):
        return _poctra.IVec_capacity(self)
    __swig_destroy__ = _poctra.delete_IVec

# Register IVec in _poctra:
_poctra.IVec_swigregister(IVec)
class IIVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _poctra.IIVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _poctra.IIVec___nonzero__(self)

    def __bool__(self):
        return _poctra.IIVec___bool__(self)

    def __len__(self):
        return _poctra.IIVec___len__(self)

    def __getslice__(self, i, j):
        return _poctra.IIVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _poctra.IIVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _poctra.IIVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _poctra.IIVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _poctra.IIVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _poctra.IIVec___setitem__(self, *args)

    def pop(self):
        return _poctra.IIVec_pop(self)

    def append(self, x):
        return _poctra.IIVec_append(self, x)

    def empty(self):
        return _poctra.IIVec_empty(self)

    def size(self):
        return _poctra.IIVec_size(self)

    def swap(self, v):
        return _poctra.IIVec_swap(self, v)

    def begin(self):
        return _poctra.IIVec_begin(self)

    def end(self):
        return _poctra.IIVec_end(self)

    def rbegin(self):
        return _poctra.IIVec_rbegin(self)

    def rend(self):
        return _poctra.IIVec_rend(self)

    def clear(self):
        return _poctra.IIVec_clear(self)

    def get_allocator(self):
        return _poctra.IIVec_get_allocator(self)

    def pop_back(self):
        return _poctra.IIVec_pop_back(self)

    def erase(self, *args):
        return _poctra.IIVec_erase(self, *args)

    def __init__(self, *args):
        _poctra.IIVec_swiginit(self, _poctra.new_IIVec(*args))

    def push_back(self, x):
        return _poctra.IIVec_push_back(self, x)

    def front(self):
        return _poctra.IIVec_front(self)

    def back(self):
        return _poctra.IIVec_back(self)

    def assign(self, n, x):
        return _poctra.IIVec_assign(self, n, x)

    def resize(self, *args):
        return _poctra.IIVec_resize(self, *args)

    def insert(self, *args):
        return _poctra.IIVec_insert(self, *args)

    def reserve(self, n):
        return _poctra.IIVec_reserve(self, n)

    def capacity(self):
        return _poctra.IIVec_capacity(self)
    __swig_destroy__ = _poctra.delete_IIVec

# Register IIVec in _poctra:
_poctra.IIVec_swigregister(IIVec)
class SizeVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _poctra.SizeVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _poctra.SizeVec___nonzero__(self)

    def __bool__(self):
        return _poctra.SizeVec___bool__(self)

    def __len__(self):
        return _poctra.SizeVec___len__(self)

    def __getslice__(self, i, j):
        return _poctra.SizeVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _poctra.SizeVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _poctra.SizeVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _poctra.SizeVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _poctra.SizeVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _poctra.SizeVec___setitem__(self, *args)

    def pop(self):
        return _poctra.SizeVec_pop(self)

    def append(self, x):
        return _poctra.SizeVec_append(self, x)

    def empty(self):
        return _poctra.SizeVec_empty(self)

    def size(self):
        return _poctra.SizeVec_size(self)

    def swap(self, v):
        return _poctra.SizeVec_swap(self, v)

    def begin(self):
        return _poctra.SizeVec_begin(self)

    def end(self):
        return _poctra.SizeVec_end(self)

    def rbegin(self):
        return _poctra.SizeVec_rbegin(self)

    def rend(self):
        return _poctra.SizeVec_rend(self)

    def clear(self):
        return _poctra.SizeVec_clear(self)

    def get_allocator(self):
        return _poctra.SizeVec_get_allocator(self)

    def pop_back(self):
        return _poctra.SizeVec_pop_back(self)

    def erase(self, *args):
        return _poctra.SizeVec_erase(self, *args)

    def __init__(self, *args):
        _poctra.SizeVec_swiginit(self, _poctra.new_SizeVec(*args))

    def push_back(self, x):
        return _poctra.SizeVec_push_back(self, x)

    def front(self):
        return _poctra.SizeVec_front(self)

    def back(self):
        return _poctra.SizeVec_back(self)

    def assign(self, n, x):
        return _poctra.SizeVec_assign(self, n, x)

    def resize(self, *args):
        return _poctra.SizeVec_resize(self, *args)

    def insert(self, *args):
        return _poctra.SizeVec_insert(self, *args)

    def reserve(self, n):
        return _poctra.SizeVec_reserve(self, n)

    def capacity(self):
        return _poctra.SizeVec_capacity(self)
    __swig_destroy__ = _poctra.delete_SizeVec

# Register SizeVec in _poctra:
_poctra.SizeVec_swigregister(SizeVec)
class DVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _poctra.DVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _poctra.DVec___nonzero__(self)

    def __bool__(self):
        return _poctra.DVec___bool__(self)

    def __len__(self):
        return _poctra.DVec___len__(self)

    def __getslice__(self, i, j):
        return _poctra.DVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _poctra.DVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _poctra.DVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _poctra.DVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _poctra.DVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _poctra.DVec___setitem__(self, *args)

    def pop(self):
        return _poctra.DVec_pop(self)

    def append(self, x):
        return _poctra.DVec_append(self, x)

    def empty(self):
        return _poctra.DVec_empty(self)

    def size(self):
        return _poctra.DVec_size(self)

    def swap(self, v):
        return _poctra.DVec_swap(self, v)

    def begin(self):
        return _poctra.DVec_begin(self)

    def end(self):
        return _poctra.DVec_end(self)

    def rbegin(self):
        return _poctra.DVec_rbegin(self)

    def rend(self):
        return _poctra.DVec_rend(self)

    def clear(self):
        return _poctra.DVec_clear(self)

    def get_allocator(self):
        return _poctra.DVec_get_allocator(self)

    def pop_back(self):
        return _poctra.DVec_pop_back(self)

    def erase(self, *args):
        return _poctra.DVec_erase(self, *args)

    def __init__(self, *args):
        _poctra.DVec_swiginit(self, _poctra.new_DVec(*args))

    def push_back(self, x):
        return _poctra.DVec_push_back(self, x)

    def front(self):
        return _poctra.DVec_front(self)

    def back(self):
        return _poctra.DVec_back(self)

    def assign(self, n, x):
        return _poctra.DVec_assign(self, n, x)

    def resize(self, *args):
        return _poctra.DVec_resize(self, *args)

    def insert(self, *args):
        return _poctra.DVec_insert(self, *args)

    def reserve(self, n):
        return _poctra.DVec_reserve(self, n)

    def capacity(self):
        return _poctra.DVec_capacity(self)
    __swig_destroy__ = _poctra.delete_DVec

# Register DVec in _poctra:
_poctra.DVec_swigregister(DVec)
class DDVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _poctra.DDVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _poctra.DDVec___nonzero__(self)

    def __bool__(self):
        return _poctra.DDVec___bool__(self)

    def __len__(self):
        return _poctra.DDVec___len__(self)

    def __getslice__(self, i, j):
        return _poctra.DDVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _poctra.DDVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _poctra.DDVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _poctra.DDVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _poctra.DDVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _poctra.DDVec___setitem__(self, *args)

    def pop(self):
        return _poctra.DDVec_pop(self)

    def append(self, x):
        return _poctra.DDVec_append(self, x)

    def empty(self):
        return _poctra.DDVec_empty(self)

    def size(self):
        return _poctra.DDVec_size(self)

    def swap(self, v):
        return _poctra.DDVec_swap(self, v)

    def begin(self):
        return _poctra.DDVec_begin(self)

    def end(self):
        return _poctra.DDVec_end(self)

    def rbegin(self):
        return _poctra.DDVec_rbegin(self)

    def rend(self):
        return _poctra.DDVec_rend(self)

    def clear(self):
        return _poctra.DDVec_clear(self)

    def get_allocator(self):
        return _poctra.DDVec_get_allocator(self)

    def pop_back(self):
        return _poctra.DDVec_pop_back(self)

    def erase(self, *args):
        return _poctra.DDVec_erase(self, *args)

    def __init__(self, *args):
        _poctra.DDVec_swiginit(self, _poctra.new_DDVec(*args))

    def push_back(self, x):
        return _poctra.DDVec_push_back(self, x)

    def front(self):
        return _poctra.DDVec_front(self)

    def back(self):
        return _poctra.DDVec_back(self)

    def assign(self, n, x):
        return _poctra.DDVec_assign(self, n, x)

    def resize(self, *args):
        return _poctra.DDVec_resize(self, *args)

    def insert(self, *args):
        return _poctra.DDVec_insert(self, *args)

    def reserve(self, n):
        return _poctra.DDVec_reserve(self, n)

    def capacity(self):
        return _poctra.DDVec_capacity(self)
    __swig_destroy__ = _poctra.delete_DDVec

# Register DDVec in _poctra:
_poctra.DDVec_swigregister(DDVec)
class DynArrayInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _poctra.DynArrayInt_swiginit(self, _poctra.new_DynArrayInt(*args))
    __swig_destroy__ = _poctra.delete_DynArrayInt

    def reserve(self, capacity):
        return _poctra.DynArrayInt_reserve(self, capacity)

    def push_back(self, *args):
        return _poctra.DynArrayInt_push_back(self, *args)

    def clear(self):
        return _poctra.DynArrayInt_clear(self)

    def capacity(self):
        return _poctra.DynArrayInt_capacity(self)

    def size(self):
        return _poctra.DynArrayInt_size(self)

    def to_string(self):
        return _poctra.DynArrayInt_to_string(self)

    def _print(self):
        return _poctra.DynArrayInt__print(self)

    def to_vec(self):
        return _poctra.DynArrayInt_to_vec(self)

    def __repr__(self):
        return _poctra.DynArrayInt___repr__(self)

    def __str__(self):
        return _poctra.DynArrayInt___str__(self)

    def __setitem__(self, index, value):
        return _poctra.DynArrayInt___setitem__(self, index, value)

    def __getitem__(self, index):
        return _poctra.DynArrayInt___getitem__(self, index)

# Register DynArrayInt in _poctra:
_poctra.DynArrayInt_swigregister(DynArrayInt)
class DynArrayDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _poctra.DynArrayDouble_swiginit(self, _poctra.new_DynArrayDouble(*args))
    __swig_destroy__ = _poctra.delete_DynArrayDouble

    def reserve(self, capacity):
        return _poctra.DynArrayDouble_reserve(self, capacity)

    def push_back(self, *args):
        return _poctra.DynArrayDouble_push_back(self, *args)

    def clear(self):
        return _poctra.DynArrayDouble_clear(self)

    def capacity(self):
        return _poctra.DynArrayDouble_capacity(self)

    def size(self):
        return _poctra.DynArrayDouble_size(self)

    def to_string(self):
        return _poctra.DynArrayDouble_to_string(self)

    def _print(self):
        return _poctra.DynArrayDouble__print(self)

    def to_vec(self):
        return _poctra.DynArrayDouble_to_vec(self)

    def __repr__(self):
        return _poctra.DynArrayDouble___repr__(self)

    def __str__(self):
        return _poctra.DynArrayDouble___str__(self)

    def __setitem__(self, index, value):
        return _poctra.DynArrayDouble___setitem__(self, index, value)

    def __getitem__(self, index):
        return _poctra.DynArrayDouble___getitem__(self, index)

# Register DynArrayDouble in _poctra:
_poctra.DynArrayDouble_swigregister(DynArrayDouble)

