# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyoctra
else:
    import _pyoctra

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class octra_dynarray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_pyoctra.octra_dynarray_data_get, _pyoctra.octra_dynarray_data_set)
    size = property(_pyoctra.octra_dynarray_size_get, _pyoctra.octra_dynarray_size_set)
    capacity = property(_pyoctra.octra_dynarray_capacity_get, _pyoctra.octra_dynarray_capacity_set)
    elementSize = property(_pyoctra.octra_dynarray_elementSize_get, _pyoctra.octra_dynarray_elementSize_set)

    def __init__(self):
        _pyoctra.octra_dynarray_swiginit(self, _pyoctra.new_octra_dynarray())
    __swig_destroy__ = _pyoctra.delete_octra_dynarray

# Register octra_dynarray in _pyoctra:
_pyoctra.octra_dynarray_swigregister(octra_dynarray)

def octra_dynarray_alloc(initial_capacity, element_size):
    return _pyoctra.octra_dynarray_alloc(initial_capacity, element_size)

def octra_dynarray_reserve(arr, newCapacity):
    return _pyoctra.octra_dynarray_reserve(arr, newCapacity)

def octra_dynarray_push(arr, element):
    return _pyoctra.octra_dynarray_push(arr, element)

def octra_dynarray_insert(_self, index, element):
    return _pyoctra.octra_dynarray_insert(_self, index, element)

def octra_dynarray_remove(_self, index):
    return _pyoctra.octra_dynarray_remove(_self, index)

def octra_dynarray_get(arr, index):
    return _pyoctra.octra_dynarray_get(arr, index)

def octra_dynarray_set(_self, index, element):
    return _pyoctra.octra_dynarray_set(_self, index, element)

def octra_dynarray_free(arr):
    return _pyoctra.octra_dynarray_free(arr)

def octra_dynarray_print(arr, printFunc):
    return _pyoctra.octra_dynarray_print(arr, printFunc)

def octra_dynarray_size(_self):
    return _pyoctra.octra_dynarray_size(_self)

def print_int(data):
    return _pyoctra.print_int(data)

def print_double(data):
    return _pyoctra.print_double(data)

def octra_dynarray_clear(_self):
    return _pyoctra.octra_dynarray_clear(_self)

def octra_dynarray_sort(_self, compareFunc):
    return _pyoctra.octra_dynarray_sort(_self, compareFunc)

